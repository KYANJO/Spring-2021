% Numerical approximation to poisson's equation over the square [a,b] x
% [a,b] with zero Neumann boundary conditions. Uses a unifoorm mesh with
% (n+2) x (n+2) total points.

% Solves with the DCT

% Input
%   pfun : the RHS of poisson equation (i.e. the Laplacian of u). (f(x,y))
%    a,b : the interval defining the square
%    m : m+2 is the number of points in either direction of the mesh.
%   

%Output
%   u : the numerical solution of poisson equation at the mesh points.
% x,y : the uniform mesh

m=(2^6)-1;
a=0;b=1;

%fuction f(x,y)
pfun=@(x,y) -8*(pi^2)*(cos(2*pi*x)).*(cos(2*pi*y));

%Approximated
[u1,x,y]=fd2poissondct(pfun,a,b,m)

%Exact function
uex=@(x,y) (cos(2*pi*x)).*(cos(2*pi*y));
ue=uex(x,y)
error = (u1-ue);

%Plot error
figure, set(gcf,'DefaultAxesFontSize',8,'PaperPosition', [0 0 3.5 3.5]),  
mesh(x,y,error), colormap([0 0 0]),xlabel('x'),ylabel('y'), 
zlabel('Error'), title(strcat('Error, h=',num2str(h))); 

function [u1,x,y] = fd2poissondct(p,a,b,m)

h=1/(m+1);

% idx and idy need to include all the grid points:
idx = 1:m+2;
idy = 1:m+2;

[x,y] = meshgrid(a:h:b); %uniform mesh, including boundary points.

% Evaluate the RHS of Poisson's equation at the interior points.
fr = feval(p,x(idy,idx),y(idy,idx));

% Computation of fhat=(S*f)*S^(-1), where S is the DCT
fhat=idct(dct(fr,1),2);

% Denominator for the computation of uhat:
denom = [bsxfun(@plus,cos(pi*(idx-1)./(m+1)).',cos(pi*(idx-1)./(m+1)))-2];

uhat = h^2/2*(fhat./denom);

%Dealing with the zero eigenvalue.
uhat(1)=0;

% Computation of u = (S^(-1)*uhat)*S
u = dct(idct(uhat,1),2);

% Adapting  f to boundary terms
fsouth = h^2*f(m+2,2:m+2) - u(m+2,2:m+2);   % North
feast = h^2*f(2:m+2,m+2) - u(2:m+2,m+2);    % East
fwest = h^2*f(2:m+2,1) - u(2:m+2,1);        % West
fnorth = h^2*f(1,2:m+2) - u(1,2:m+2);       % South

% Boundary values from the Neumann BC
Ah = zeros(m+1,m+1);
for ii = 1:m+1
    for j = 1:m+1
       Ah(i,i) = -3;
       
       if abs(i-j) == 1
           Ah(i,j) = 1;
       end
    end
end


 % Append on to u the


% You should just return u, not u1.
u1 = u;

end