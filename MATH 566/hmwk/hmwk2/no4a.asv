% Program that implements the classical Gram-Schmidt algorithm for
% computing the QR factorization of a m by n matrix A, where m>=n.

%m equally spaced points over [0,1]
m = 4;
B = [];
% Vandermonde matrix B
t = ze
for i = 1:n-1
    for j = 1:m
        tj = (j-1)/(m-1);
        B = [B,tj];
    end
end
%fliping the vandermonde matrix B to form A
A = fliplr(vander(B));

%calling the function
[q,r] = CMGS(A)

%Classical Gram-Schmidt 
function [q,r] = CMGS(A)

[m,n] = size(A);

q = zeros(m,n);
r = zeros(n,n);
v = zeros(m,n);

for j=1:n
    
   v(:,j) = A(:,j);
   
   for i = 1:j-1
       
      r(i,j) = q(:,i)'*A(:,j);
      v(:,j) = v(:,j) - r(i,j)*q(:,i); 
      
   end
   
   r(j,j) = norm(v(:,j),2);
   q(:,j) = v(:,j)/r(j,j);
   
end
end