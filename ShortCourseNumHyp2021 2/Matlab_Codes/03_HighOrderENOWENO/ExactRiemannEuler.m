% =================================================================== 
% 
%  Exact Riemann solver for the Euler equations  
%  of compressible gasdynamics according to  
% 
%  E.F. Toro, Riemann solvers and numerical methods for fluid dynamics
%  third edition, Springer, 2009.
%
%  MATLAB version written by Michael Dumbser 
%
%  please cite the above reference when using this code. 
% 
% =================================================================== 
%
function [rho,u,p]=ExactRiemannEuler(rhoL,rhoR,uL,uR,pL,pR,s,gammaL,gammaR) 
    %
    % Define a small tolerance variable; 
    tol = 1e-14; 
    % Define the maximum number of Newton iterations
    maxiter = 100; 
    % Define some constants that are often needed in the exact Riemann solver 
    GL    = [ (gammaL-1.0)/(2.0*gammaL); 
             (gammaL+1.0)/(2.0*gammaL); 
             2.0*gammaL/(gammaL-1.0);
             2.0/(gammaL-1.0); 
             2.0/(gammaL+1.0); 
             (gammaL-1.0)/(gammaL+1.0); 
             0.5*(gammaL-1.0); 
             1.0/gammaL; 
             gammaL-1.0];                 
    %
    GR    = [ (gammaR-1.0)/(2.0*gammaR); 
              (gammaR+1.0)/(2.0*gammaR); 
              2.0*gammaR/(gammaR-1.0); 
              2.0/(gammaR-1.0); 
              2.0/(gammaR+1.0); 
              (gammaR-1.0)/(gammaR+1.0); 
              0.5*(gammaR-1.0); 
              1.0/gammaR; 
              gammaR-1.0 ];  
    %
    % Compute left and right sound speeds 
    %
    cL = sqrt(gammaL*pL/rhoL); 
    cR = sqrt(gammaR*pR/rhoR); 
    %  
    du = uR-uL; 
    ducrit = sqrt(GL(4)*GR(4))*(cL+cR)-du; 
    %
    if (ducrit<0) then
        disp('ERROR. Vacuum is generated by given data!') 
        return
    end
    % 
    % Compute an initial guess for the pressure using
    % two-shock or two-rarefaction approximate Riemann solvers 
    %
    p = InitialGuess(rhoL,rhoR,uL,uR,pL,pR,cL,cR,GL,GR); 
    %
    p0  = p; 
    cha = 2.0*tol; 
    %
    % Newton iteration to find the exact solution for the 
    % pressure in the star region of the Riemann problem 
    % 
    for iNewton=[1:maxiter]
        if(cha<tol)
            break;
        end
        % Compute the pressure functions left and right 
        [fl,fld] = prefun(p,rhoL,pL,cL,GL);  
        [fr,frd] = prefun(p,rhoR,pR,cR,GR); 
        % Newton method for p 
        p   = p - (fl+fr+du)/(fld+frd); 
        % Goal function 
        cha = 2.0 * abs((p-p0)/(p+p0)); 
        % Allow only positive pressures    
        if(p<tol)
            p = tol; 
        end
        p0=p; 
    end
    % Compute the velocity 
    u = 0.5*(uL+uR+fr-fl); 
    % Star states for u and p 
    pm = p; 
    um = u; 
    % Finally, we can compute the exact solution at x/t=s 
    [rho,u,p]=sample(rhoL,rhoR,uL,uR,um,pL,pR,pm,cL,cR,GL,GR,s); 
end

%
% =========== Auxiliary internal functions =========== 
%

function [f,fd] = prefun(p,rhok,pk,ck,G) 
    if(p<pk)
        prat = p/pk;
        f    = G(4)*ck*(prat^G(1) - 1.0); 
        fd   = (1.0/(rhok*ck))*prat^(-G(2)); 
    else
        ak  = G(5)/rhok; 
        bk  = G(6)*pk; 
        qrt = sqrt(ak/(bk+p)); 
        f   = (p-pk) * qrt; 
        fd  = (1.0-0.5*(p-pk)/(bk+p))*qrt; 
    end
end
    
function p = InitialGuess(rhoL,rhoR,uL,uR,pL,pR,cL,cR,GL,GR);  
    tol = 1e-14; 
    qmax = 2.0; 
    pv   = 0.5*(pL+pR)-0.125*(uR-uL)*(rhoL+rhoR)*(cL+cR); 
    pmin = min(pL,pR); 
    pmax = max(pL,pR); 
    qrat = pmax/pmin; 
    if( (qrat<=qmax)&&((pmin<=pv)&&(pv<=pmax))) 
        p = max(tol,pv);
    else
        if(pv<pmin)
            pnu = cL+cR-sqrt(GL(7)*GR(7))*(uR-uL); 
            pde = cL/pL^GL(1) + cR/pR^GR(1); 
            p   = (pnu/pde)^sqrt(GL(3)*GR(3)); 
        else
            gel = sqrt((GL(5)/rhoL)/(GL(6)*pL+max(tol,pv))); 
            ger = sqrt((GR(5)/rhoR)/(GR(6)*pR+max(tol,pv))); 
            p   = (gel*pL+ger*pR-(uR-uL))/(gel+ger); 
            p   = max(tol,p); 
        end
    end
end

function [rho,u,p]=sample(rhoL,rhoR,uL,uR,um,pL,pR,pm,cL,cR,GL,GR,s) 
    if(s<=um)
       if(pm<=pL)
          shl=uL-cL; 
          if(s<=shl)
             rho=rhoL; 
             u=uL; 
             p=pL; 
          else
             cml = cL*(pm/pL)^GL(1); 
             stl = um-cml; 
             if(s>stl) 
                rho=rhoL*(pm/pL)^GL(8); 
                u=um;
                p=pm; 
             else
                u=GL(5)*(cL+GL(7)*uL+s); 
                c=GL(5)*(cL+GL(7)*(uL-s)); 
                rho=rhoL*(c/cL)^GL(4); 
                p=pL*(c/cL)^GL(3); 
             end
          end
       else
          pml = pm/pL; 
          sl  = uL-cL*sqrt(GL(2)*pml+GL(1)); 
          if(s<=sl) 
             rho=rhoL; 
             u=uL; 
             p=pL; 
          else
             rho=rhoL*(pml+GL(6))/(pml*GL(6)+1.0); 
             u=um; 
             p=pm; 
          end
       end
    else
       if(pm>pR) 
          pmr=pm/pR; 
          sr =uR+cR*sqrt(GR(2)*pmr+GR(1)); 
          if(s>=sr)
             rho=rhoR; 
             u=uR; 
             p=pR; 
          else
             rho=rhoR*(pmr+GR(6))/(pmr*GR(6)+1.0); 
             u=um; 
             p=pm; 
          end
       else
          shr=uR+cR; 
          if(s>=shr)
             rho=rhoR; 
             u=uR; 
             p=pR; 
          else
             cmr=cR*(pm/pR)^GR(1); 
             str=um+cmr; 
             if(s<=str)
                rho=rhoR*(pm/pR)^GR(8); 
                u=um; 
                p=pm; 
             else
                u=GR(5)*(-cR+GR(7)*uR+s);
                c=GR(5)*( cR-GR(7)*(uR-s));
                rho=rhoR*(c/cR)^GR(4);
                p=pR*(c/cR)^GR(3);
             end
          end
       end
    end
    %
end
   

          

